https://qiita.com/key_sleep/items/7ff4a5ca036ec7adb3a5


<Springのテスト>
spring-boot-starter-test
JUnitなどのテストフレームワークを、Springの起動後に実行する

@RunWith(SpringRunner.class)
テストを何で実行するか指定する
JUnitを使えるのがSpringRunner
・SpringRunner.class
DIを利用したテストの場合
モックを利用する場合は@Autowiredではなく@MockBean

・MockitoJUnitRunner.class
テスト対象にモックしたいクラスがある場合
@Mockで@Autowiredを切り替える

・PowerMockRunner.class
staticメソッドのモックが必要な場合


@SpringBootTest
SpringBootを起動してからテストを実施する
メインパッケージから構成クラス（@SpringBootApplicationとか）を探し
それを使用したSpringアプリケーションコンテキストを開始する
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
でWeb系のテストをするときにランダムポートを使用する

@Sql("/~~.sql")
test/resources以下のSQLを実行後にテストを実施する
SQLは付与したメソッド内だけで有効

@AutoConfigureMockMvc
MockMvcを@AutowiredすることでSpringのモックができる
API試験とかに使う
サーバを起動するコストがかからない
@WebMvcTestを@SpringbootTetの代わりに使用することで
テストのコンテキストを特定のクラスに絞ることができる
@WebMvcTest(HomeController.class)
とかで特定のクラスだけ指定できる
その場合。HomeControllerが依存している部分を@MockBeanでモック化が必要


@WithMockUser
SpringSecurityとかのログイン後のユーザ指定をするとき使う
@WithMockUser(username="satou", roles={"ROLE_ADMIN"})
とかでユーザ情報を設定できる

@MockBean
Mockitoを使ってサービスなどのモックができる
戻り値を任意に設定できるので、必要なサービスの関数をモックできる
when(service.count()).thenReturn(10);


@SpringApplicationConfiguration(Application.class)